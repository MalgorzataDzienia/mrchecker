= Data driven approach

*Data driven approach* - External *data driven*

*External data driven* - Data as external file injected in *test case*

*Test case* - Categorize *functionality* and *severity*

More information about data driven you can find here and here

There are a few ways to define parameters for tests.

= Internal Data driven approach

Data as *part* of *test case*

Parameters that are passed into tests using the `@Parameters` annotation must be _Object[]_'s

The different means to pass in parameters are shown below.

=== In the annotation:

----
@Parameters({"1, 2, 3", "3, 4, 7", "5, 6, 11", "7, 8, 15"})
----

image::image30.png[]

The parameters must be primitive objects such as integers, strings, or booleans. Each set of parameters is contained within a single string and will be parsed to their correct values as defined by the test method’s signature.

=== In a method named in the annotation:

----
@Parameters(method = "addParameters")
----

image::image31.png[]

A separate method can be defined and referred to for parameters. This method must return an `Object[]` and can contain normal objects.

=== In a class:

----
@Parameters(source = MyContainsTestProvider.class)
----

image::image32.png[]

A separate class can be used to define parameters for the test. This test must contain at least one static method that returns an Object[], and its name must be prefixed with provide. The class could also contain multiple methods that provide parameters to the test, as long as they also meet the required criteria.

= External Data Driven

Data as *external file injected* in *test case*

Tests use the annotation @FileParameters to inject CSVs file.

----
@FileParameters("src/test/resources/datadriven/test.csv")
----

A CSV can also be used to contain the parameters for the tests. It is pretty simple to set up, as it’s just a comma separated list.

=== Classic CSV

image::image33.png[]

and CSV file structure

image::image34.png[]

=== CSV with headers

image::image35.png[]

and CSV file structure

image::image36.png[]

=== CSV with specific column mapper

image::image37.png[]

and Mapper implementation

image::image38.png[]